version: "3.9"

services:
  web-server:
    build:
      context: ./containers/web-server
      dockerfile: Dockerfile-dev
    image: ghcr.io/nismod/gri-web-server-dev:0.1
    volumes:
      - ./containers/web-server/certs:/etc/ssl/certs
    ports:
      - 5443:443
      - 5080:80

  db:
    image: kartoza/postgis:14-3.1
    volumes:
      - postgis-data:/var/lib/postgresql
    env_file:
      - ./envs/dev/.db.env
    ports:
      - 5432:5432
    healthcheck:
      test: "exit 0"

  tiles-db:
    image: mysql:5.7.39
    env_file:
      - ./envs/dev/.mysql.env
    ports:
      - 3306:3306
    volumes:
      - tiles-db-data:/var/lib/mysql

  pgadmin:
    image: dpage/pgadmin4:latest
    volumes:
      - pgadmin:/var/lib/pgadmin
    env_file:
      - ./envs/dev/.pgadmin.env
    ports:
      - 5050:80

  snakemake:
    image: ghcr.io/nismod/gri-snakemake:0.1
    build: ./etl
    volumes:
      - ./etl:/opt/etl
      - ./tileserver:/opt/tileserver
    command:
      [
        "--cores",
        "4",
        "--latency-wait",
        "20",
        "--resources",
        "disk_mb=60",
        "--rerun-incomplete",
        "-s",
        "/opt/etl/Snakefile"
      ]

  aqueduct-downloader:
    image: gri-snakemake:latest
    build: ./etl
    volumes:
      - ./etl:/opt/etl
    entrypoint: [ "python" ]
    command:
      [
        "/opt/etl/scripts/downloaders.py",
        "aqueduct",
        "False",
        "/opt/etl/hazard_layers.csv",
        "/opt/etl/raw_data/processed_data/input/hazard-aqueduct"
      ]

  backend:
    build: ./containers/backend
    image: ghcr.io/nismod/gri-backend:0.1
    volumes:
      - ./tileserver/raster/test/db:/opt/terracotta/db
      - ./tileserver/raster/test/data:/home/dusted/code/oxford/infra-risk-vis/tileserver/raster/test/data
    env_file:
      - ./envs/dev/.backend.env
    ports:
      - 8888:8888

  # raster-tileserver:
  #   build: ./containers/raster
  #   image: ghcr.io/nismod/gri-raster-tileserver:0.1
  #   volumes:
  #     - ./containers/raster/docker-entrypoint.sh:/docker-entrypoint.sh
  #     - ./tileserver/raster/db:/opt/terracotta/db
  #     - ./tileserver/raster/data:/opt/terracotta/data # bind mount
  #     - ./containers/raster/config.toml:/opt/config.toml
  #   env_file:
  #     - ./envs/dev/.raster-tileserver.env
  #   ports:
  #     - 5000:5000
  #   command: [ "serve" ]

  raster-tileserver-generator:
    build: ./containers/raster
    image: ghcr.io/nismod/gri-raster-tileserver:0.1
    env_file:
      - ./envs/dev/.raster-tileserver.env
    volumes:
      - ./containers/raster/ingest.py:/ingest.py
      - ./tileserver/raster/test/db:/opt/terracotta/db
      - ./tileserver/raster/test/data:/home/dusted/code/oxford/infra-risk-vis/tileserver/raster/test/data
      - ./containers/raster/config.toml:/opt/config.toml
      - ./etl/hazard_layers_test.csv:/opt/hazard_layers.csv
    ports:
      - 5050:5000
    command:
      [
        "python",
        "ingest.py",
        "/home/dusted/code/oxford/infra-risk-vis/tileserver/raster/test/data",
        "/opt/hazard_layers.csv",
        "mysql://root:B4Fq1kRvU28tTZh5g@tiles-db/tilestwo"
      ]

  vector-tileserver:
    build: ./containers/vector
    image: ghcr.io/nismod/gri-vector-tileserver:0.1
    volumes:
      - ./tileserver/vector/data:/data # bind mount
      - ./containers/vector/config.json:/config.json
    expose:
      - 8080

volumes:
  tiles-db-data:
  postgis-data:
  pgadmin:
