version: "3.9"

services:
  traefik:
    image: "traefik:v2.9"
    container_name: "traefik"
    profiles: ["traefik"]
    command:
      - "--log.level=INFO"
      - "--accessLog=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker=true"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--entryPoints.web.address=:80"
      - "--providers.file.directory=/configuration/"
      - "--providers.file.watch=true"
      - "--api.insecure=true"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "./containers/traefik/dev/configuration:/configuration"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./containers/traefik/dev/certs:/certs"

  web-server:
    # TODO: update tag to latest when irv-frontend publication workflow is updated
    image: ghcr.io/nismod/irv-frontend:0.21
    profiles: ["web-server"]
    volumes:
      - ./irv-autopkg/packages:/usr/share/nginx/html/packages
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web-server.rule=Host(`localhost`)"
      - "traefik.http.routers.web-server.entrypoints=web"
      - "traefik.http.services.web-server.loadbalancer.server.port=80"

  db:
    image: kartoza/postgis:14-3.1
    volumes:
      - postgis-data:/var/lib/postgresql
    env_file:
      - ./envs/dev/.db.env
    ports:
      - 5432:5432
    healthcheck:
      test: "exit 0"

  tiles-db:
    image: mysql:5.7.39
    env_file:
      - ./envs/dev/.mysql.env
    ports:
      - 3306:3306
    volumes:
      - ./tileserver/raster/db:/var/lib/mysql
      - ./backup:/backup

  backend:
    build: ./containers/backend
    image: ghcr.io/nismod/gri-backend:1.0
    volumes:
      - ./etl/raster/cog/:/data/
      - ./containers/backend/backend/:/code/backend/
    env_file:
      - ./envs/dev/.backend.env
    ports:
      - 8888:8888
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`localhost`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend.entrypoints=web"
      - "traefik.http.routers.backend.middlewares=backend-stripprefix"
      - "traefik.http.middlewares.backend-stripprefix.stripprefix.prefixes=/api"
      - "traefik.http.services.backend.loadbalancer.server.port=8888"

  vector-tileserver:
    build:
      context: ./containers/vector
      dockerfile: Dockerfile-dev
    image: ghcr.io/nismod/gri-vector-tileserver-dev:0.10
    volumes:
      - ./tileserver/vector/data:/data # bind mount
      - ./containers/vector/config-dev.json:/config.json
    ports:
      - 8800:8080
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vector-tileserver.rule=Host(`localhost`) && PathPrefix(`/vector`)"
      - "traefik.http.routers.vector-tileserver.entrypoints=web"
      - "traefik.http.routers.vector-tileserver.middlewares=vector-tileserver-stripprefix"
      - "traefik.http.middlewares.vector-tileserver-stripprefix.stripprefix.prefixes=/vector"
      - "traefik.http.services.vector-tileserver.loadbalancer.server.port=8080"

  redis:
    image: redis:6.2-alpine
    restart: always
    profiles: ["autopkg"]
    command: redis-server --save 20 1 --loglevel warning
    volumes:
      - ./irv-autopkg/redis:/data

  irv-autopkg-worker:
    image: ghcr.io/nismod/irv-autopkg:0.1.0-dev
    profiles: ["autopkg"]
    volumes:
      - ./irv-autopkg/packages:/data/packages
      - ./irv-autopkg/tmp:/data/tmp
    env_file:
      - envs/dev/.irv-autopkg.env
    command: celery --app dataproc.tasks worker --loglevel=info --concurrency=4

  irv-autopkg-api:
    image: ghcr.io/nismod/irv-autopkg:0.1.0-dev
    profiles: ["autopkg"]
    volumes:
      - ./irv-autopkg/packages:/data/packages
      - ./irv-autopkg/tmp:/data/tmp
    env_file:
      - envs/dev/.irv-autopkg.env
    expose:
      - "8000"
    command: uvicorn api.main:app --host 0.0.0.0 --port 8000 --root-path /extract
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.irv-autopkg-api.rule=Host(`localhost`) && PathPrefix(`/extract`)"
      - "traefik.http.routers.irv-autopkg-api.entrypoints=web"
      - "traefik.http.routers.irv-autopkg-api.middlewares=irv-autopkg-api-stripprefix"
      - "traefik.http.middlewares.irv-autopkg-api-stripprefix.stripprefix.prefixes=/extract"
      - "traefik.http.services.irv-autopkg-api.loadbalancer.server.port=8000"

  #### Utility Containers
  ## WARNING - Deletes all entries from the MySQL Terracotta Db for the given DB name
  raster-tile-delete-entries:
    build: ./containers/raster-tile-ingester
    image: ghcr.io/nismod/gri-raster-tile-ingester:0.1
    profiles: ["raster-tile-delete-entries"]
    env_file:
      - ./envs/dev/.etl.env
    volumes:
      - ./etl/scripts/ingest.py:/ingest.py # Mounted only for Dev
    command:
      [
        "delete_database_entries",
        "--database_name",
        "iris"
      ]

  ## WARNING - Drop the MySQL Terracotta Db with the given DB name
  raster-tile-drop-database:
    build: ./containers/raster-tile-ingester
    image: ghcr.io/nismod/gri-raster-tile-ingester:0.1
    profiles: ["raster-tile-drop-database"]
    env_file:
      - ./envs/dev/.etl.env
    volumes:
      - ./etl/scripts/ingest.py:/ingest.py # Mounted only for Dev
    command: [ "drop_database", "--database_name", "aqueduct" ]

  ## WARNING - this will wipe the existing tables. TODO: Alembic
  recreate-metadata-schema:
    build: ./containers/backend
    image: ghcr.io/nismod/gri-backend:1.0
    profiles: ["recreate-metadata-schema"]
    volumes:
      - ./containers/backend/backend/db/models.py:/code/backend/db/models.py
    env_file:
      - ./envs/dev/.backend.env
    entrypoint: [ "python" ]
    command: [ "/code/backend/create_schema.py" ]

volumes:
  postgis-data:
