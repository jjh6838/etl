configfile: "config.yml"

# import our dataset specific rules
module aqueduct:
    snakefile: "pipelines/aqueduct/rules.smk"
    config: config
use rule * from aqueduct as aqueduct_*
ruleorder: aqueduct_POST_metadata_to_backend > POST_metadata_to_backend
ruleorder: aqueduct_ingest_rasters > ingest_rasters

module esa_land_cover:
    snakefile: "pipelines/esa_land_cover/rules.smk"
    config: config
use rule * from esa_land_cover as esa_land_cover_*
ruleorder: esa_land_cover_download_300m_2020_from_CDS > clip_raster
ruleorder: esa_land_cover_ingest_categorical_raster > ingest_rasters

module exposure_nature:
    snakefile: "pipelines/exposure_nature/rules.smk"
    config: config
use rule * from exposure_nature as exposure_nature_*

# gem_earthquake has no dataset specific rules defined

module iris:
    snakefile: "pipelines/iris/rules.smk"
    config: config
use rule * from iris as iris_*

module isimip:
    snakefile: "pipelines/isimip/rules.smk"
    config: config
use rule * from isimip as isimip_*
ruleorder: isimip_POST_metadata_to_backend > POST_metadata_to_backend

module ghsl_buildings:
    snakefile: "pipelines/ghsl_buildings/rules.smk"
    config: config
use rule * from ghsl_buildings as ghsl_buildings_*
ruleorder: ghsl_buildings_clip_and_reproject_raster > clip_raster

module jrc_pop:
    snakefile: "pipelines/jrc_pop/rules.smk"
    config: config
use rule * from jrc_pop as jrc_pop_*
ruleorder: jrc_pop_clip_and_reproject_raster > clip_raster

module storm:
    snakefile: "pipelines/storm/rules.smk"
    config: config
use rule * from storm as storm_*

module traveltime_to_healthcare:
    snakefile: "pipelines/traveltime_to_healthcare/rules.smk"
    config: config
use rule * from traveltime_to_healthcare as traveltime_to_healthcare_*

# datasets the `all` target rule will expand to
ALL_DATASETS = (
    "aqueduct",
    "esa_land_cover",
    "exposure_nature",
    "gem_earthquake",
    "ghsl_buildings",
    "iris",
    "isimip",
    "jrc_pop",
    "storm",
    "traveltime_to_healthcare",
)

# prefix any shell blocks with these statements
# - create variables from env file and export
# - print commands to stdout during execution
# - exit if any command has non-zero exit status, not just the last in a rule
shell.prefix(f"set -a && source ../envs/{config['environment']}/.etl.env && set +a; set -x; set -e; ")

wildcard_constraints:
    KEY="[^/]+",
    DATASET="[^/]+",
    EPOCH="\d+",
    RELEASE="\d{4}[A-Z]",
    RP="\d+",
    SSP="constant|ssp\d",

# import rule definitions common to many datasets
include: "raster_processing.smk"
include: "database.smk"

rule all:
    """
    Target rule to fetch, process and ingest all registered datasets.
    """
    input:
        lambda x: expand("pipelines/{dataset}/metadata_created.flag", dataset=ALL_DATASETS)